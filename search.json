[{"path":[]},{"path":"https://igcop.netlify.app/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"https://igcop.netlify.app/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"https://igcop.netlify.app/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"https://igcop.netlify.app/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"https://igcop.netlify.app/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement [INSERT CONTACT METHOD]. complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"https://igcop.netlify.app/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"https://igcop.netlify.app/CODE_OF_CONDUCT.html","id":"id_1-correction","dir":"","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"https://igcop.netlify.app/CODE_OF_CONDUCT.html","id":"id_2-warning","dir":"","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"https://igcop.netlify.app/CODE_OF_CONDUCT.html","id":"id_3-temporary-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"https://igcop.netlify.app/CODE_OF_CONDUCT.html","id":"id_4-permanent-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"https://igcop.netlify.app/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.0, available https://www.contributor-covenant.org/version/2/0/code_of_conduct.html. Community Impact Guidelines inspired Mozilla’s code conduct enforcement ladder. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https:// www.contributor-covenant.org/translations.","code":""},{"path":"https://igcop.netlify.app/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing to igcop","title":"Contributing to igcop","text":"outlines propose change igcop. detailed info contributing , tidyverse packages, please see development contributing guide.","code":""},{"path":"https://igcop.netlify.app/CONTRIBUTING.html","id":"fixing-typos","dir":"","previous_headings":"","what":"Fixing typos","title":"Contributing to igcop","text":"can fix typos, spelling mistakes, grammatical errors documentation directly using GitHub web interface, long changes made source file. generally means ’ll need edit roxygen2 comments .R, .Rd file. can find .R file generates .Rd reading comment first line.","code":""},{"path":"https://igcop.netlify.app/CONTRIBUTING.html","id":"bigger-changes","dir":"","previous_headings":"","what":"Bigger changes","title":"Contributing to igcop","text":"want make bigger change, ’s good idea first file issue make sure someone team agrees ’s needed. ’ve found bug, please file issue illustrates bug minimal reprex (also help write unit test, needed).","code":""},{"path":"https://igcop.netlify.app/CONTRIBUTING.html","id":"pull-request-process","dir":"","previous_headings":"Bigger changes","what":"Pull request process","title":"Contributing to igcop","text":"Fork package clone onto computer. haven’t done , recommend using usethis::create_from_github(\"\", fork = TRUE). Install development dependences devtools::install_dev_deps(), make sure package passes R CMD check running devtools::check(). R CMD check doesn’t pass cleanly, ’s good idea ask help continuing. Create Git branch pull request (PR). recommend using usethis::pr_init(\"brief-description--change\"). Make changes, commit git, create PR running usethis::pr_push(), following prompts browser. title PR briefly describe change. body PR contain Fixes #issue-number. user-facing changes, add bullet top NEWS.md (.e. just first header). Follow style described https://style.tidyverse.org/news.html.","code":""},{"path":"https://igcop.netlify.app/CONTRIBUTING.html","id":"code-style","dir":"","previous_headings":"Bigger changes","what":"Code style","title":"Contributing to igcop","text":"New code follow tidyverse style guide. can use styler package apply styles, please don’t restyle code nothing PR. use roxygen2, Markdown syntax, documentation. use testthat unit tests. Contributions test cases included easier accept.","code":""},{"path":"https://igcop.netlify.app/CONTRIBUTING.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Contributing to igcop","text":"Please note igcop project released Contributor Code Conduct. contributing project agree abide terms.","code":""},{"path":"https://igcop.netlify.app/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2021 igcop authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://igcop.netlify.app/SUPPORT.html","id":null,"dir":"","previous_headings":"","what":"Getting help with igcop","title":"Getting help with igcop","text":"Thanks using igcop! filing issue, places explore pieces put together make process smooth possible.","code":""},{"path":"https://igcop.netlify.app/SUPPORT.html","id":"make-a-reprex","dir":"","previous_headings":"","what":"Make a reprex","title":"Getting help with igcop","text":"Start making minimal reproducible example using reprex package. haven’t heard used reprex , ’re treat! Seriously, reprex make R-question-asking endeavors easier (pretty insane ROI five ten minutes ’ll take learn ’s ). additional reprex pointers, check Get help! section tidyverse site.","code":""},{"path":"https://igcop.netlify.app/SUPPORT.html","id":"where-to-ask","dir":"","previous_headings":"","what":"Where to ask?","title":"Getting help with igcop","text":"Armed reprex, next step figure ask. ’s question: start community.rstudio.com, /StackOverflow. people answer questions. ’s bug: ’re right place, file issue. ’re sure: let community help figure ! problem bug feature request, can easily return report . opening new issue, sure search issues pull requests make sure bug hasn’t reported /already fixed development version. default, search pre-populated :issue :open. can edit qualifiers (e.g. :pr, :closed) needed. example, ’d simply remove :open search issues repo, open closed.","code":""},{"path":"https://igcop.netlify.app/SUPPORT.html","id":"what-happens-next","dir":"","previous_headings":"","what":"What happens next?","title":"Getting help with igcop","text":"efficient possible, development tidyverse packages tends bursty, shouldn’t worry don’t get immediate response. Typically don’t look repo sufficient quantity issues accumulates, ’s burst intense activity focus efforts. makes development efficient avoids expensive context switching problems, cost taking longer get back . process makes good reprex particularly important might multiple months initial report start working . can’t reproduce bug, can’t fix !","code":""},{"path":[]},{"path":"https://igcop.netlify.app/articles/Formulas.html","id":"definition-via-cdf","dir":"Articles","previous_headings":"General Definition","what":"Definition via cdf","title":"Formulas for the IG and IGL Copula Families","text":"DJ Interpolated DJ copula classes (thus IG IGL copulas) characterized generating function ψ:[0,∞)→(0,1]\\psi:[0, \\infty) \\rightarrow (0, 1], concave distribution function convex survival function. DJ copula (thus IGL copula family) cdf CDJ(u,v;ψ)=u+v−1+(1−u)ψ((1−u)ψ←(1−v)),C_{\\text{DJ}}(u, v; \\psi) = u + v - 1 + (1 - u) \\psi\\left((1 - u) \\psi^{\\leftarrow}(1 - v)\\right), (u,v)(u, v) unit square, ψ←\\psi^{\\leftarrow} left-inverse ψ\\psi. , class contain independence copula, can introduce interpolating parameter θ≥0\\theta \\geq 0 θ=0\\theta = 0 results independence copula, θ=∞\\theta = \\infty results DJ copula class – hence interpolating DJ copulas independence copula. interpolated DJ copula (thus IG copula) cdf CintDJ(u,v;θ,ψ)=u+v−1+(1−u)Hψ(Hψ←(1−v;θ);(1−u)θ)C_{\\text{intDJ}}(u, v; \\theta, \\psi) = u + v - 1 + (1 - u) H_{\\psi}\\left(H_{\\psi}^{\\leftarrow}(1 - v; \\theta); (1 - u) \\theta \\right) (u,v)(u, v) unit square, HψH_{\\psi} interpolating function ψ\\psi, defined Hψ(x;η)=e−xψ(ηx)H_{\\psi}(x; \\eta) = e ^ {-x} \\psi(\\eta x) x>0x > 0 η≥0\\eta \\geq 0, range 0 1. derivative (respect first argument) also useful: D1Hψ(x;η)=−e−x(ψ(ηx)−ηψ′(ηx)).\\text{D}_1 H_{\\psi}(x; \\eta) = - e ^ {-x} (\\psi(\\eta x) - \\eta \\psi'(\\eta x)). Although DJ copula class can considered part Interpolated DJ class include θ=∞\\theta = \\infty parameter space, formulas θ=∞\\theta = \\infty simplify obvious way, ’s best treat two classes separately. formulas vignette can found Coia (2017), different (complex) parameterization: ψ\\psi function ψ(1/x)\\psi(1/x) HH function Hψ(x;θ)=1xψ(1/(θlogx))H_{\\psi}(x; \\theta) = \\frac{1}{x} \\psi(1 / (\\theta \\log x)), copula formulas correspondingly slightly different.","code":""},{"path":"https://igcop.netlify.app/articles/Formulas.html","id":"kappa-transform-of-psi","dir":"Articles","previous_headings":"General Definition","what":"Kappa Transform of ψ\\psi","title":"Formulas for the IG and IGL Copula Families","text":"Besides HψH_{\\psi}, another transformation ψ\\psi necessary writing formulas succinctly: κψ(x)=ddxxψ(x)=ψ(x)+xψ′(x)\\kappa_{\\psi}(x) = \\frac{\\text{d}}{\\text{d}x} x \\psi(x) = \\psi(x) + x \\psi'(x) x>0x > 0. way, choices ψ\\psi result valid DJ / Interpolated DJ copulas – requirement κ\\kappa function. , case want go opposite direction, obtain ψ\\psi choice κ\\kappa, can solving differential equation definition κ\\kappa, get ψ(x)=1x∫0xκ(t)dt.\\psi(x) = \\frac{1}{x} \\int_{0}^{x} \\kappa(t) \\text{d}t.","code":""},{"path":"https://igcop.netlify.app/articles/Formulas.html","id":"copula-quantities-dj-copula-class-igl-copula-family","dir":"Articles","previous_headings":"General Definition","what":"Copula Quantities: DJ copula class (IGL copula family)","title":"Formulas for the IG and IGL Copula Families","text":"simplify formulas, denote y=ψ←(1−v)y = \\psi^{\\leftarrow}(1 - v). Throughout, pp, uu, vv numbers 0 1. density DJ copula (thus IGL copula) cDJ(u,v;ψ)=(1−u)κψ′((1−u)y)ψ′(y)c_{\\text{DJ}}(u, v; \\psi) = (1 - u) \\frac{\\kappa_{\\psi}'((1 - u) y)}{\\psi'(y)} two families conditional distributions, obtained conditioning either 1st 2nd variable, CDJ,2|1(v|u;ψ)=1−κψ((1−u)y);CDJ,1|2(u|v;ψ)=1−(1−u)2ψ′((1−u)y)ψ′(y).\\begin{equation} \\begin{split} C_{\\text{DJ}, 2 | 1}(v | u; \\psi) & = 1 - \\kappa_{\\psi}((1 - u) y); \\\\ C_{\\text{DJ}, 1 | 2}(u | v; \\psi) & = 1 - (1 - u) ^ 2 \\frac{\\psi'((1 - u) y)}{\\psi'(y)}. \\end{split} \\end{equation} corresponding quantile functions (left) inverses functions, 2|1 quantile function closed form: CDJ,2|1−1(p|u;ψ)=1−ψ((1−u)−1κψ←(1−p))C_{\\text{DJ}, 2 | 1}^{-1}(p | u; \\psi) = 1 - \\psi\\left((1 - u) ^ {-1} \\kappa_{\\psi}^{\\leftarrow}(1 - p) \\right) check equations, note dydv=−1/ψ′(y)\\frac{\\text{d}y}{\\text{d}v} = - 1 / \\psi'(y). comparing formulas Coia (2017) Section E.1.2, note formulas defined copula reflections.","code":""},{"path":"https://igcop.netlify.app/articles/Formulas.html","id":"copula-quantities-interpolated-dj-copula-class-ig-copula-family","dir":"Articles","previous_headings":"General Definition","what":"Copula Quantities: Interpolated DJ copula class (IG copula family)","title":"Formulas for the IG and IGL Copula Families","text":"simplify formulas, denote y=Hψ←(1−v;θ)y = H_{\\psi} ^ {\\leftarrow}(1 - v; \\theta). Throughout, pp, uu, vv numbers 0 1. density interpolated DJ copula (thus IG copula) cintDJ(u,v;θ,ψ)=D1Hκψ(y;(1−u)θ)D1Hψ(y;θ)\\begin{equation} c_{\\text{intDJ}}(u, v; \\theta, \\psi) =    \\frac{\\text{D}_1 H_{\\kappa_{\\psi}}(y; (1 - u) \\theta)}        {\\text{D}_1 H_{\\psi}(y; \\theta)} \\end{equation} two families conditional distributions, obtained conditioning either 1st 2nd variable, convenient form consider interpolating function HHof κ\\kappa function instead ψ\\psi function: CintDJ,2|1(v|u;θ,ψ)=1−Hκψ(y;(1−u)θ)CintDJ,1|2(u|v;θ,ψ)=1−(1−u)D1Hψ(y;(1−u)θ)D1Hψ(y;θ)\\begin{equation} \\begin{split} C_{\\text{intDJ}, 2 | 1}(v | u; \\theta, \\psi) & = 1 - H_{\\kappa_{\\psi}}\\left(y; (1 - u) \\theta \\right) \\\\ C_{\\text{intDJ}, 1 | 2}(u | v; \\theta, \\psi) & = 1 - (1 - u)    \\frac{\\text{D}_1 H_{\\psi}(y; (1 - u) \\theta)}        {\\text{D}_1 H_{\\psi}(y; \\theta)}\\\\ \\end{split} \\end{equation} corresponding quantile functions (left) inverses functions, 2|1 quantile function closed form: CintDJ,2|1−1(p|u;θ,ψ)=1−Hψ(Hκψ←(1−p;(1−u)θ);θ)\\begin{equation} \\begin{split} C_{\\text{intDJ}, 2 | 1}^{-1}(p | u; \\theta, \\psi) & = 1 - H_{\\psi} \\left(   H_{\\kappa_{\\psi}} ^ {\\leftarrow} (1 - p; (1 - u) \\theta); \\theta \\right) \\end{split} \\end{equation} check equations, note dydv=−1/D1Hψ(y;θ)\\frac{\\text{d}y}{\\text{d}v} = - 1 / \\text{D}_1 H_\\psi(y; \\theta).","code":""},{"path":[]},{"path":"https://igcop.netlify.app/articles/Formulas.html","id":"generating-functions","dir":"Articles","previous_headings":"Formulas specific to IG and IGL Copulas","what":"Generating Functions","title":"Formulas for the IG and IGL Copula Families","text":"generating functions IG IGL copula families rely Gamma(α\\alpha) distribution, cdf Fα(x)=Γ(α)−Γ*(α,x)Γ(α)F_{\\alpha}(x) = \\frac{\\Gamma(\\alpha) - \\Gamma^{*}(\\alpha, x)}{\\Gamma(\\alpha)} α>0\\alpha > 0 x≥0x \\ge 0, Γ\\Gamma Gamma function, Γ*\\Gamma^{*} (upper) incomplete Gamma function defined Γ*(α,x)=∫x∞tα−1e−tdt.\\Gamma^{*}(\\alpha, x) = \\int_x^{\\infty} t ^ {\\alpha - 1} e ^ {-t} \\text{d} t. density function denoted fαf_{\\alpha}. emphasize dependence ψ\\psi, κ\\kappa, HH parameter α\\alpha, parameter written subscript. ψ\\psi function derivative ψα(x)=1−Fα(x)+αxFα+1(x);ψα′(x)=−αx2Fα+1(x).\\begin{equation} \\begin{split} \\psi_{\\alpha}(x) & = 1 - F_{\\alpha}(x) + \\frac{\\alpha}{x} F_{\\alpha + 1}(x); \\\\ \\psi_{\\alpha}'(x) & = - \\frac{\\alpha}{x ^ 2} F_{\\alpha + 1}(x). \\end{split} \\end{equation} plots functions various values α\\alpha. κ\\kappa function Gamma survival function, κα(x)=1−Fα(x).\\kappa_{\\alpha}(x) = 1 - F_{\\alpha}(x). HH function simplify, although convenience, HψαH_{\\psi_{\\alpha}} simply denoted HαH_{\\alpha}. plots functions, compared plot negative exponential e−xe^{-x} faded dotted line. Notice increasing α\\alpha draws Hα(⋅,η)H_{\\alpha}(\\cdot, \\eta) closer negative exponential, whereas increasing η\\eta pulls .","code":""},{"path":"https://igcop.netlify.app/articles/Formulas.html","id":"copula-quantities","dir":"Articles","previous_headings":"Formulas specific to IG and IGL Copulas","what":"Copula Quantities","title":"Formulas for the IG and IGL Copula Families","text":"formulas copula quantities simplify nicely general forms. , ones . IGL copula family: CIGL,1|2(u|v;θ,α)=1−Fα+1((1−u)y)Fα+1(y);CIGL,1|2−1(p|v;θ,α)=1−1yFα+1−1((1−p)Fα+1(y)).\\begin{equation} \\begin{split} C_{\\text{IGL}, 1 | 2}(u | v; \\theta, \\alpha) & =    1 - \\frac{F_{\\alpha + 1}((1 - u) y)}{F_{\\alpha + 1}(y)}; \\\\ C_{\\text{IGL}, 1 | 2}^{-1}(p | v; \\theta, \\alpha) & = 1 - \\frac{1}{y}   F_{\\alpha + 1}^{-1}\\left((1 - p) F_{\\alpha + 1}(y)\\right). \\end{split} \\end{equation}","code":""},{"path":[]},{"path":"https://igcop.netlify.app/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Vincenzo Coia. Author, maintainer. Harry Joe. Author.","code":""},{"path":"https://igcop.netlify.app/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Coia V, Joe H (2024). igcop: Computational Tools IG IGL Copula Families. R package version 1.0.2.","code":"@Manual{,   title = {igcop: Computational Tools for the IG and IGL Copula Families},   author = {Vincenzo Coia and Harry Joe},   year = {2024},   note = {R package version 1.0.2}, }"},{"path":"https://igcop.netlify.app/index.html","id":"igcop-","dir":"","previous_headings":"","what":"Computational Tools for the IG and IGL Copula Families","title":"Computational Tools for the IG and IGL Copula Families","text":"goal igcop provide computational tools Integrated Gamma (IG) Integrated Gamma Limit (IGL) copula families.","code":""},{"path":"https://igcop.netlify.app/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Computational Tools for the IG and IGL Copula Families","text":"igcop available CRAN, can installed running","code":"install.packages(\"igcop\")"},{"path":"https://igcop.netlify.app/index.html","id":"definition","dir":"","previous_headings":"","what":"Definition","title":"Computational Tools for the IG and IGL Copula Families","text":"IG copula family defined parameters θ > 0 α > 0, IGL copula family obtained θ → ∞. See vignette detailed definition. contour plots normal scores copula densities.  IG IGL copula families unique , used regression context, conditional distribution response (2nd copula variable) Extreme Value Index increases predictor IG copula, reduces heavy-tailed response light-tailed conditional distribution IGL copula. Specifically, Extreme Value Index 2|1 distribution Variable 2 Pareto(1) marginal distribution 0 IGL copula, (1+θ(1−u))−1 IG copula (Coia 2017).","code":""},{"path":"https://igcop.netlify.app/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Computational Tools for the IG and IGL Copula Families","text":"package piggybacks base R syntax distributions, dnorm() pexp(), whose functions adopt convention: IG IGL copulas: p cdf, d density (logd log density), q quantile (conditional distributions ), r random number generation (supported conditional distributions). ig igl correspond IG copula IGL copula, respectively. condig12 condigl12 correspond conditional distribution first variable given second, IG copula IGL copula respectively. condig21 condigl21 correspond conditional distribution second variable given first, IG copula IGL copula respectively (also available condig condigl match syntax CopulaModel package). examples, starting density IG copula: Computations vectorized argument. ’s cdf density IGL copula different values: doesn’t make sense talk quantiles multivariate distribution, defined conditional distributions. example distribution given first variable (“2 given 1”). Note “2 given 1” distributions swap u v arguments better align conditioning, can either explicitly include 21 suffix . corresponding “1 given 2” distribution. Since less common regression scenarios, explicitly add 12 prefix “1 given 2.” Generating 5 values IG copula:","code":"library(igcop) <prefix><name> dig(0.3, 0.6, theta = 3, alpha = 2) #> [1] 1.096211 u <- seq(0.1, 0.9, length.out = 9) v <- seq(0.9, 0.5, length.out = 9) pigl(u, v, alpha = 4) #> [1] 0.1000000 0.2000000 0.2999711 0.3988536 0.4888134 0.5508382 0.5683229 #> [8] 0.5447653 0.4998090 digl(0.2, v, alpha = u) #> [1] 0.8522462 0.8230206 0.8471676 0.8915708 0.9458967 1.0058156 1.0691273 #> [8] 1.1345476 1.2012456 qcondig(v, u, theta = 5, alpha = 3) #> [1] 0.7435415 0.7228302 0.7121613 0.7073784 0.7056649 0.7039164 0.6972994 #> [8] 0.6777041 0.6356285 qcondig21(v, u, theta = 5, alpha = 3) #> [1] 0.7435415 0.7228302 0.7121613 0.7073784 0.7056649 0.7039164 0.6972994 #> [8] 0.6777041 0.6356285 qcondig12(v, u, theta = 5, alpha = 3) #> [1] 0.8896885 0.8114873 0.7297887 0.6598357 0.6097781 0.5811235 0.5749922 #> [8] 0.5976573 0.6689895 set.seed(42) rig(5, theta = 5, alpha = 4) #> # A tibble: 5 × 2 #>       u     v #>   <dbl> <dbl> #> 1 0.915 0.598 #> 2 0.937 0.848 #> 3 0.286 0.134 #> 4 0.830 0.761 #> 5 0.642 0.770"},{"path":"https://igcop.netlify.app/index.html","id":"developers","dir":"","previous_headings":"","what":"Developers","title":"Computational Tools for the IG and IGL Copula Families","text":"Besides copula quantities described , generating functions (outlined vignette) included package internal functions, directly link C++. notation : ψα igl_gen(); κα igl_kappa(); Hα interp_gen(); Hκα interp_kappa(). Related functions following suffixes: _inv: function inverse. _D: function derivative. _D1: function derivative respect first argument. three functions involved linking C: R function (igl_gen()) recycles arguments passing formals_to() function, uses vctrs::vec_recycle_common(). recycled arguments passed corresponding R function _vec suffix, passes functions C++ (via infrastructure created running Rcpp::compileAttributes()). C++ functions accept vector inputs _vec suffix. functions loop along entry, feeds scalar values C++ function computation (either _single prefix, _algo prefix function contains Newton-Raphson algorithm). Map dependencies among functions: igl_gen : pgamma igl_gen_D : pgamma igl_gen_inv_algo : qgamma igl_gen igl_gen_D igl_gen_inv : igl_gen_inv_algo interp_gen : igl_gen interp_gen_D1 : igl_gen interp_gen_inv_algo : igl_gen_inv_algo interp_gen interp_gen_D1 interp_gen_inv : interp_gen_inv_algo igl_kappa : pgamma igl_kappa_D : dgamma igl_kappa_inv : qgamma interp_kappa : igl_kappa interp_kappa_D1 : igl_kappa igl_kappa_D interp_kappa_inv_algo : igl_kappa_inv interp_kappa igl_kappa igl_kappa_D interp_kappa_inv interp_kappa_inv : interp_kappa_inv_algo pcondig21 : interp_gen_inv interp_kappa qcondig21 : interp_kappa_inv interp_gen qcondig12_algo : interp_gen_inv igl_gen igl_gen_D pcondig12 qcondig12 : qcondig12_algo pcondig12 : interp_gen_inv interp_gen_D1 dig : interp_gen_inv interp_kappa_D1 interp_gen_D1 logdig : interp_gen_inv igl_kappa igl_kappa_D igl_gen igl_gen_D pig : interp_gen_inv rig : qcondig21 qcondigl21 : igl_kappa_inv pcondigl21 : igl_gen_inv igl_kappa pcondigl12 : igl_gen_inv igl_gen_D qcondigl12 : igl_gen_inv pgamma qgamma digl : igl_gen_inv igl_kappa_D igl_gen_D pigl : igl_gen_inv igl_gen rigl : qcondigl21","code":""},{"path":"https://igcop.netlify.app/index.html","id":"attributions","dir":"","previous_headings":"","what":"Attributions","title":"Computational Tools for the IG and IGL Copula Families","text":"Package developed maintained Vincenzo Coia, thanks Harry Joe help converting Newton Raphson algorithms related functions C (originally coded R igcop Version 0.2.0).","code":""},{"path":[]},{"path":"https://igcop.netlify.app/reference/check_params.html","id":null,"dir":"Reference","previous_headings":"","what":"Check validity of copula parameters — check_alpha","title":"Check validity of copula parameters — check_alpha","text":"Ensures input values non-negative.","code":""},{"path":"https://igcop.netlify.app/reference/check_params.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check validity of copula parameters — check_alpha","text":"","code":"check_alpha(alpha)  check_theta(theta)"},{"path":"https://igcop.netlify.app/reference/check_params.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check validity of copula parameters — check_alpha","text":"alpha Values alpha check. theta Values theta check.","code":""},{"path":"https://igcop.netlify.app/reference/check_params.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check validity of copula parameters — check_alpha","text":"error theta alpha negative; invisible value otherwise. NA values throw error.","code":""},{"path":"https://igcop.netlify.app/reference/dot-onUnload.html","id":null,"dir":"Reference","previous_headings":"","what":"Clean up DLL — .onUnload","title":"Clean up DLL — .onUnload","text":"recommended \"Compiled Code\" chapter book \"R packages\" (Version 2) Hadley Wickham Jenny Bryan.","code":""},{"path":"https://igcop.netlify.app/reference/dot-onUnload.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clean up DLL — .onUnload","text":"","code":".onUnload(libpath)"},{"path":"https://igcop.netlify.app/reference/dot-onUnload.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clean up DLL — .onUnload","text":"libpath Argument","code":""},{"path":"https://igcop.netlify.app/reference/formals_to.html","id":null,"dir":"Reference","previous_headings":"","what":"Send arguments to a function after vectorizing — formals_to","title":"Send arguments to a function after vectorizing — formals_to","text":"used within (encapsulating) function, formals_to recycles inputs encapsulating function vectors length, sends updated arguments specified function.","code":""},{"path":"https://igcop.netlify.app/reference/formals_to.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Send arguments to a function after vectorizing — formals_to","text":"","code":"formals_to(.fn)"},{"path":"https://igcop.netlify.app/reference/formals_to.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Send arguments to a function after vectorizing — formals_to","text":".fn function want send recycled arguments .","code":""},{"path":"https://igcop.netlify.app/reference/formals_to.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Send arguments to a function after vectorizing — formals_to","text":"function .fn evaluated arguments given encapsulating function.","code":""},{"path":"https://igcop.netlify.app/reference/generators.html","id":null,"dir":"Reference","previous_headings":"","what":"IG/IGL Generators and Related Functions — interp_gen_inv","title":"IG/IGL Generators and Related Functions — interp_gen_inv","text":"psi, H, kappa functions IG IGL copula families.","code":""},{"path":"https://igcop.netlify.app/reference/generators.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"IG/IGL Generators and Related Functions — interp_gen_inv","text":"","code":"interp_gen_inv(p, eta, alpha)  interp_kappa(x, eta, alpha)  interp_kappa_inv(p, eta, alpha)  interp_gen(x, eta, alpha)  igl_kappa(x, alpha)  igl_kappa_D(x, alpha)  igl_kappa_inv(p, alpha)  igl_gen(x, alpha)  igl_gen_D(x, alpha)  igl_gen_inv(p, alpha)"},{"path":"https://igcop.netlify.app/reference/generators.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"IG/IGL Generators and Related Functions — interp_gen_inv","text":"p Function inverse argument. Vector values 0 1. eta, alpha Function parameters. Vector positive values. x Function argument. Vector non-negative values.","code":""},{"path":"https://igcop.netlify.app/reference/generators.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"IG/IGL Generators and Related Functions — interp_gen_inv","text":"function values, vector.","code":""},{"path":"https://igcop.netlify.app/reference/generators.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"IG/IGL Generators and Related Functions — interp_gen_inv","text":"Kappa function relatives prefix igl_kappa; Psi function relatives prefix igl_gen; Interpolating function H either kappa psi igl prefix replaced interp. Relatives functions: suffix inv indicates inverse; suffix D represents function derivative, D1 derivative respect first argument. . Suffix _vec indicates entries must vectors length; _single means entries must scalars.","code":""},{"path":"https://igcop.netlify.app/reference/generators.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"IG/IGL Generators and Related Functions — interp_gen_inv","text":"Inputs must recyclable via vctrs::vec_recycle_common().","code":""},{"path":"https://igcop.netlify.app/reference/generators_vec.html","id":null,"dir":"Reference","previous_headings":"","what":"IG/IGL Generators and Related Functions: matching inputs — igl_gen_vec","title":"IG/IGL Generators and Related Functions: matching inputs — igl_gen_vec","text":"psi, H, kappa functions IG IGL copula families, inputs needing vectors length. functions called R functions name, without _vec suffix.","code":""},{"path":"https://igcop.netlify.app/reference/generators_vec.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"IG/IGL Generators and Related Functions: matching inputs — igl_gen_vec","text":"","code":"igl_gen_vec(x, alpha)  igl_gen_D_vec(x, alpha)  igl_gen_inv_vec(p, alpha)  igl_kappa_vec(x, alpha)  igl_kappa_D_vec(x, alpha)  igl_kappa_inv_vec(p, alpha)  interp_gen_vec(x, eta, alpha)  interp_gen_inv_vec(p, eta, alpha)  interp_kappa_vec(x, eta, alpha)  interp_kappa_inv_vec(p, eta, alpha)"},{"path":"https://igcop.netlify.app/reference/generators_vec.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"IG/IGL Generators and Related Functions: matching inputs — igl_gen_vec","text":"x Function argument. Vector non-negative values. p Function inverse argument. Vector values 0 1. eta, alpha Function parameters. Vector positive values.","code":""},{"path":"https://igcop.netlify.app/reference/generators_vec.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"IG/IGL Generators and Related Functions: matching inputs — igl_gen_vec","text":"calling function manually, make sure input vectors common length.","code":""},{"path":[]},{"path":"https://igcop.netlify.app/reference/ig.html","id":null,"dir":"Reference","previous_headings":"","what":"IG Copula Family Functions — pcondig21","title":"IG Copula Family Functions — pcondig21","text":"Functions related IG copula family, denoted  'ig'.","code":""},{"path":"https://igcop.netlify.app/reference/ig.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"IG Copula Family Functions — pcondig21","text":"","code":"pcondig21(v, u, theta, alpha)  qcondig21(p, u, theta, alpha)  qcondig(p, u, theta, alpha)  pcondig(v, u, theta, alpha)  pcondig12(u, v, theta, alpha)  qcondig12(p, v, theta, alpha)  dig(u, v, theta, alpha)  logdig(u, v, theta, alpha)  pig(u, v, theta, alpha)  rig(n, theta, alpha)"},{"path":"https://igcop.netlify.app/reference/ig.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"IG Copula Family Functions — pcondig21","text":"u, v Vectors values 0 1 representing values first second copula variables. theta Parameter IG copula family. Vectorized; >0. alpha Parameter IG copula family. Vectorized; >0. p Vector quantile levels 0 1 evaluate quantile function . n Positive integer. Number observations randomly draw.","code":""},{"path":"https://igcop.netlify.app/reference/ig.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"IG Copula Family Functions — pcondig21","text":"Numeric vector length equal length input vector(s).","code":""},{"path":"https://igcop.netlify.app/reference/ig.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"IG Copula Family Functions — pcondig21","text":"Inputting two vectors greater length 1 allowed, length. Also, qcondig21 pcondig21 qcondig pcondig – distributions variable 2 given 1.","code":""},{"path":"https://igcop.netlify.app/reference/ig.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"IG Copula Family Functions — pcondig21","text":"","code":"u <- runif(10) v <- runif(10) pig(u, v, theta = 5, alpha = 1) #>  [1] 0.079648326 0.162368477 0.026362046 0.074323196 0.004455655 0.122812692 #>  [7] 0.257811554 0.027490461 0.330950541 0.768651255 dig(u, v, theta = 2, alpha = 2) #>  [1] 0.6531305 0.8742874 0.9792254 1.1742052 1.2351493 0.9896548 0.9901719 #>  [8] 1.0359737 0.8771307 1.6711461 logdig(u, v, theta = 2, alpha = 2) #>  [1] -0.425978390 -0.134346098 -0.020993430  0.160591535  0.211191866 #>  [6] -0.010399079 -0.009876691  0.035341735 -0.131099211  0.513509688 pcondig21(v, u, theta = 3, alpha = 6) #>  [1] 0.91720529 0.17493670 0.03424133 0.32060350 0.40474305 0.19566369 #>  [7] 0.40310912 0.06366146 0.38828096 0.96078162 qcondig21(v, u, theta = 3, alpha = 6) #>  [1] 0.83368782 0.17494456 0.03424133 0.32016882 0.39998875 0.19567598 #>  [7] 0.40396967 0.06366146 0.38912428 0.98621554 pcondig12(u, v, theta = 3, alpha = 6) #>  [1] 0.078299811 0.834355112 0.600760902 0.158437311 0.007645536 0.466513005 #>  [7] 0.501368832 0.289767791 0.734541432 0.704784075 qcondig12(u, v, theta = 3, alpha = 6) #>  [1] 0.083206392 0.834310960 0.600760870 0.155984470 0.007161119 0.466273968 #>  [7] 0.494164675 0.289766698 0.731212224 0.824525886 rig(10, theta = 3, alpha = 3) #> # A tibble: 10 × 2 #>         u      v #>     <dbl>  <dbl> #>  1 0.290  0.0312 #>  2 0.678  0.233  #>  3 0.735  0.318  #>  4 0.196  0.575  #>  5 0.981  0.533  #>  6 0.742  0.470  #>  7 0.0514 0.600  #>  8 0.530  0.944  #>  9 0.696  0.185  #> 10 0.689  0.224   # log density available for extra precision log(dig(0.1, 0.1, 2.5, 12.3)) == logdig(0.1, 0.1, 2.5, 12.3) #> [1] FALSE"},{"path":"https://igcop.netlify.app/reference/ig_cpp_vec.html","id":null,"dir":"Reference","previous_headings":"","what":"Select IG copula quantities: matching inputs — dig_vec","title":"Select IG copula quantities: matching inputs — dig_vec","text":"density function, 1|2 conditional cdf, 1|2 conditional quantile function IG copula family. Inputs need vectors length. functions called R functions name, without _vec suffix.","code":""},{"path":"https://igcop.netlify.app/reference/ig_cpp_vec.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Select IG copula quantities: matching inputs — dig_vec","text":"","code":"dig_vec(u, v, theta, alpha)  pcondig12_vec(u, v, theta, alpha)  qcondig12_vec(p, v, theta, alpha)"},{"path":"https://igcop.netlify.app/reference/ig_cpp_vec.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Select IG copula quantities: matching inputs — dig_vec","text":"u, v Copula arguments. Vector values 0 1. theta, alpha IG copula parameters. Vector positive values. p Function inverse argument. Vector values 0 1.","code":""},{"path":"https://igcop.netlify.app/reference/ig_cpp_vec.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Select IG copula quantities: matching inputs — dig_vec","text":"qcondig12() function needs Newton Raphson algorithm. also needs access version pcondig12() dig(). , three functions coded C++, scalar vector pair functions.","code":""},{"path":"https://igcop.netlify.app/reference/ig_cpp_vec.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Select IG copula quantities: matching inputs — dig_vec","text":"calling functions manually, make sure input vectors common length.","code":""},{"path":[]},{"path":"https://igcop.netlify.app/reference/igcop.html","id":null,"dir":"Reference","previous_headings":"","what":"igcop: Computational Tools for the IG and IGL Copula Families — igcop","title":"igcop: Computational Tools for the IG and IGL Copula Families — igcop","text":"Compute distributional quantities Integrated Gamma (IG) IG Limit (IGL) copula, cdf density, along conditional quantities cdf, quantiles, densities. Generate data copula.","code":""},{"path":"https://igcop.netlify.app/reference/igcop.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"igcop: Computational Tools for the IG and IGL Copula Families — igcop","text":"Access copula quantities starting p, d, q, r prefixes, followed copula name – either ig igl, conditional versions, condig condigl.","code":""},{"path":"https://igcop.netlify.app/reference/igcop.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"igcop: Computational Tools for the IG and IGL Copula Families — igcop","text":"Maintainer: Vincenzo Coia vincenzo.coia@gmail.com Authors: Harry Joe","code":""},{"path":"https://igcop.netlify.app/reference/igl.html","id":null,"dir":"Reference","previous_headings":"","what":"IGL Copula Family Functions — qcondigl","title":"IGL Copula Family Functions — qcondigl","text":"Functions related IGL copula family, denoted  'igl'.","code":""},{"path":"https://igcop.netlify.app/reference/igl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"IGL Copula Family Functions — qcondigl","text":"","code":"qcondigl(p, u, alpha)  pcondigl(v, u, alpha)  qcondigl21(p, u, alpha)  pcondigl21(v, u, alpha)  pcondigl12(u, v, alpha)  qcondigl12(p, v, alpha)  digl(u, v, alpha)  pigl(u, v, alpha)  rigl(n, alpha)  logdigl(u, v, alpha)"},{"path":"https://igcop.netlify.app/reference/igl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"IGL Copula Family Functions — qcondigl","text":"p Vector quantile levels 0 1 evaluate quantile function . u, v Vectors values 0 1 representing values first second copula variables. alpha Single numeric >0; corresponds parameter alpha IGL copula family. n Positive integer. Number observations randomly draw.","code":""},{"path":"https://igcop.netlify.app/reference/igl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"IGL Copula Family Functions — qcondigl","text":"Numeric vector length equal length input vector(s).","code":""},{"path":"https://igcop.netlify.app/reference/igl.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"IGL Copula Family Functions — qcondigl","text":"Inputting two vectors greater length 1 allowed, length. Also, qcondigl21 pcondigl21 qcondigl pcondigl – distributions variable 2 given 1.","code":""},{"path":"https://igcop.netlify.app/reference/igl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"IGL Copula Family Functions — qcondigl","text":"","code":"set.seed(1) u <- runif(10) v <- runif(10) pigl(u, v, alpha = 1) #>  [1] 0.09036086 0.10358874 0.49893409 0.37976926 0.19726813 0.48995618 #>  [7] 0.71269122 0.66079779 0.31652482 0.06094790 digl(u, v, alpha = 2) #>  [1] 1.573817e+00 1.351845e+00 1.628684e+00 1.317590e-01 2.054155e-01 #>  [6] 2.514377e-01 3.743734e-01 3.446458e-31 9.890313e-01 7.031873e-02 logdigl(u, v, alpha = 0.4) #>  [1]   0.20792570   0.14927593   0.11282773  -0.53704402  -0.16615410 #>  [6]  -0.41629460  -0.26890732 -11.61569597  -0.02645597  -0.34758937 pcondigl21(v, u, alpha = 6) #>  [1] 0.367517415 0.202267370 0.825425218 0.000291085 0.999961459 0.001544306 #>  [7] 0.001353188 1.000000000 0.141933361 0.999998899 qcondigl21(v, u, alpha = 6) #>  [1] 0.1204253 0.1584193 0.6289526 0.8898574 0.3855237 0.8922194 0.9535514 #>  [8] 0.8484575 0.5537787 0.3055268 pcondigl12(u, v, alpha = 6) #>  [1]  5.529694e-01  7.632423e-01  2.905738e-01  9.999573e-01  1.392047e-04 #>  [6]  9.997266e-01  9.997780e-01 -2.220446e-16  9.216055e-01  3.539984e-06 qcondigl12(u, v, alpha = 6) #>  [1] 0.1253460 0.1627296 0.6762018 0.6168242 0.6525954 0.6750200 0.8416717 #>  [8] 0.9923653 0.4208920 0.5751476 rigl(10, alpha = 3) #> # A tibble: 10 × 2 #>         u      v #>     <dbl>  <dbl> #>  1 0.935  0.925  #>  2 0.212  0.330  #>  3 0.652  0.608  #>  4 0.126  0.0776 #>  5 0.267  0.524  #>  6 0.386  0.485  #>  7 0.0134 0.367  #>  8 0.382  0.0930 #>  9 0.870  0.896  #> 10 0.340  0.285"},{"path":"https://igcop.netlify.app/reference/test_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Test data — .u","title":"Test data — .u","text":"Internal data used test scripts. .u .v vectors matching length containing values 0 1 reasonably cover unit square. .cpar list IG copula parameter pairs c(theta, alpha), .theta .alpha corresponding (unique) individual values.","code":""},{"path":"https://igcop.netlify.app/reference/test_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test data — .u","text":"","code":".u  .v  .cpar  .theta  .alpha"},{"path":"https://igcop.netlify.app/reference/test_data.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Test data — .u","text":"Everything numeric vector, except .cpar, list bivariate numeric vectors. .u .v matching length; rest intended matching lengths. object class numeric length 17. object class list length 25. object class numeric length 14. object class numeric length 11.","code":""},{"path":[]},{"path":"https://igcop.netlify.app/news/index.html","id":"igcop-102","dir":"Changelog","previous_headings":"","what":"igcop 1.0.2","title":"igcop 1.0.2","text":"CRAN release: 2023-11-14 Package-level documentation now accessible via package?igcop.","code":""},{"path":"https://igcop.netlify.app/news/index.html","id":"igcop-101","dir":"Changelog","previous_headings":"","what":"igcop 1.0.1","title":"igcop 1.0.1","text":"CRAN release: 2021-10-13 Ensure specification bd,eps,mxiter parameters match across calls Newton Raphson algorithms. Add tests interp_gen_D1 0. Added package documentation.","code":""},{"path":"https://igcop.netlify.app/news/index.html","id":"igcop-100","dir":"Changelog","previous_headings":"","what":"igcop 1.0.0","title":"igcop 1.0.0","text":"package now C++ backend, converting four Newton-Raphson algorithms dependencies R C++. Smaller changes: Renamed tau argument p IG IGL quantile functions. Removed igl_gen_DD igamma() internal functions, used copula quantities.","code":""},{"path":"https://igcop.netlify.app/news/index.html","id":"igcop-020","dir":"Changelog","previous_headings":"","what":"igcop 0.2.0","title":"igcop 0.2.0","text":"Added NEWS.md file track changes package. Completed collection distributional quantities match CopulaModel package. Computations quantile functions now robust. Small values parameter alpha (previously = k - 1) now reliable. Placed theta alpha parameters IG copula arguments.","code":""},{"path":"https://igcop.netlify.app/news/index.html","id":"igcop-010","dir":"Changelog","previous_headings":"","what":"igcop 0.1.0","title":"igcop 0.1.0","text":"Computational tools IG IGL copulas now available, using original parameterization copulas defined Coia (2017) thesis.","code":""}]
