% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/igl_gen.R
\name{igl_gen}
\alias{igl_gen}
\alias{igl_gen_D}
\alias{igl_gen_inv}
\title{Generating function for the IGL copula family}
\usage{
igl_gen(x, alpha)

igl_gen_D(x, alpha)

igl_gen_inv(p, alpha, mxiter = 20, eps = 1e-12, bd = 5)
}
\arguments{
\item{x}{Vector of values >=0 to evaluate the function at.}

\item{alpha}{Parameter of the function, alpha > 0. Vectorized.}

\item{p}{Vector of values to evaluate the inverse function at, between
0 and 1 (inclusive).}

\item{mxiter}{Maximum number of iterations to run the Newton-Raphson
algorithm for computing the inverse. Positive integer, defaults to 20.}

\item{eps}{The Newton-Raphson algorithm for computing an inverse will
stop if the step size is less than this small number.}

\item{bd}{The largest acceptable step size in the Newton-Raphson
algorithm. Step size is reduced if it exceeds this bound.}
}
\description{
\code{igl_gen} is the function itself; \code{igl_gen_inv} is
its inverse; and \code{igl_gen_D} is the
derivative. Function arguments and parameters are vectorized.
}
\examples{
arg <- c(0, 0.5, 3, Inf, NA)
igl_gen(arg, alpha = 1)
igl_gen(arg, alpha = 0.2)
igl_gen_D(arg, alpha = 1)
igl_gen_D(arg, alpha = 2)
igl_gen_inv(c(0, 0.5, 1), alpha = 0.5)
}
