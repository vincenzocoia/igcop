% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/interp.R, R/y_interp_gen_inv.R,
%   R/y_interp_kappa_inv.R
\name{interp_gen}
\alias{interp_gen}
\alias{interp_gen_D1}
\alias{interp_kappa}
\alias{interp_kappa_D1}
\alias{y_interp_gen_inv}
\alias{y_interp_kappa_inv}
\title{Interpolating Functions}
\usage{
interp_gen(x, eta, alpha)

interp_gen_D1(x, eta, alpha)

interp_kappa(x, eta, alpha)

interp_kappa_D1(x, eta, alpha)

y_interp_gen_inv(p, eta, alpha)

y_interp_kappa_inv(p, eta, alpha)
}
\arguments{
\item{x}{Vector of values >=1 to evaluate the interpolating function at.}

\item{eta}{Vector of values >0 of second argument of the
interpolating function.}

\item{alpha}{Vector of values >0 corresponding to the \eqn{alpha} parameter
of the IGL generating function.}

\item{p}{Vector of values between 0 and 1 to evaluate the inverse
function at.}
}
\description{
These interpolating functions
depend on a generating function (of a DJ copula).
\code{interp_gen()} uses the IGL generating function \eqn{\Psi_k};
\code{interp_kappa()} uses the "kappa version" of that same function.

These interpolating functions
depend on a generating function (of a DJ copula).
\code{interp_gen()} uses the IGL generating function \eqn{\Psi_k};
\code{interp_kappa()} uses the "kappa version" of that same function.
}
\details{
Appending \verb{_inv} to the function name indicates inverse with
respect to the first argument. Appending \verb{_D1} indicates
derivative with respect to the first argument. Function arguments
and parameters are vectorized.

Appending \verb{_inv} to the function name indicates inverse with
respect to the first argument. Appending \verb{_D1} indicates
derivative with respect to the first argument. Function arguments
and parameters are vectorized.
}
