% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/interp_gen.R, R/interp_kappa.R
\name{interp_gen}
\alias{interp_gen}
\alias{interp_gen_D1}
\alias{interp_gen_inv}
\alias{interp_kappa}
\alias{interp_kappa_D1}
\alias{interp_kappa_inv}
\title{Interpolating Functions}
\usage{
interp_gen(x, eta, alpha)

interp_gen_D1(x, eta, alpha)

interp_gen_inv(p, eta, alpha, mxiter = 40, eps = 1e-12, bd = 5)

interp_kappa(x, eta, alpha)

interp_kappa_D1(x, eta, alpha)

interp_kappa_inv(p, eta, alpha, mxiter = 80, eps = 1e-12, bd = 5)
}
\arguments{
\item{x}{Vector of values >=1 to evaluate the interpolating function at.}

\item{eta}{Vector of values >0 of second argument of the
interpolating function.}

\item{alpha}{Vector of values >0 corresponding to the \eqn{alpha} parameter
of the IGL generating function.}

\item{p}{Vector of values between 0 and 1 to evaluate the inverse
function at.}

\item{mxiter}{Maximum number of iterations to run the Newton-Raphson
algorithm when computing inverse. Positive integer, default 20.}

\item{eps}{The Newton-Raphson algorithm for computing an inverse will
stop if the step size is less than this small number.}

\item{bd}{The largest acceptable step size in the Newton-Raphson
algorithm. Step size is reduced if it reaches this large.}
}
\description{
These interpolating functions
depend on a generating function (of a DJ copula).
\code{interp_gen()} uses the IGL generating function \eqn{\Psi_k};
\code{interp_kappa()} uses the "kappa version" of that same function.
}
\details{
Appending \verb{_inv} to the function name indicates inverse with
respect to the first argument. Appending \verb{_D1} indicates
derivative with respect to the first argument. Function arguments
and parameters are vectorized.
}
